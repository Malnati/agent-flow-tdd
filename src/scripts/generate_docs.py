#!/usr/bin/env python3
"""
Script para gera√ß√£o autom√°tica de documenta√ß√£o usando IA.
"""
import json
import logging
import os
from pathlib import Path

from src.core.kernel import AgentOrchestrator
from src.core.db import DatabaseManager

logger = logging.getLogger(__name__)

class DocsGenerator:
    """Gerador de documenta√ß√£o usando IA."""

    def __init__(self):
        """Inicializa o gerador de documenta√ß√£o."""
        self.orchestrator = AgentOrchestrator()
        self.db = DatabaseManager()
        self.docs_dir = Path("docs")
        self.sections = [
            ("overview", ["index", "objective", "architecture", "technologies"]),
            ("installation", ["index", "dependencies", "virtualenv", "environment"]),
            ("usage", ["index", "cli", "mcp", "examples"]),
            ("development", ["index", "code-organization", "local-execution", "docker", "makefile"]),
            ("testing", ["index", "unit-tests", "coverage", "e2e-tests"]),
            ("database", ["index", "structure", "sql-scripts", "manager", "makefile"]),
            ("logs", ["index", "format", "cli", "levels", "storage"]),
            ("deployment", ["index", "docker", "production", "github-pages"]),
            ("troubleshooting", ["index", "common-errors", "fallback", "execution-logs"])
        ]

    def generate_section(self, section: str, subsection: str) -> None:
        """Gera uma se√ß√£o da documenta√ß√£o.
        
        Args:
            section: Nome da se√ß√£o principal
            subsection: Nome da subse√ß√£o
        """
        logger.info(f"Gerando documenta√ß√£o: {section}/{subsection}")
        
        # Cria diret√≥rio se n√£o existir
        section_dir = self.docs_dir / section
        section_dir.mkdir(parents=True, exist_ok=True)
        
        # Gera prompt para a IA
        prompt = {
            "content": f"Gerar documenta√ß√£o para {section}/{subsection}",
            "metadata": {
                "type": "docs",
                "section": section,
                "subsection": subsection,
                "options": {
                    "model": "tinyllama-1.1b",
                    "format": "markdown"
                }
            }
        }
        
        # Envia para o orquestrador
        try:
            result = self.orchestrator.handle_input(json.dumps(prompt))
            if isinstance(result, str):
                result = json.loads(result)
            
            # Salva arquivo markdown
            output_file = section_dir / f"{subsection}.md"
            with open(output_file, "w", encoding="utf-8") as f:
                f.write(result["content"])
            
            logger.info(f"‚úÖ Documenta√ß√£o gerada: {output_file}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar documenta√ß√£o {section}/{subsection}: {e}")
            raise

    def generate_all(self) -> None:
        """Gera toda a documenta√ß√£o."""
        logger.info("üöÄ Iniciando gera√ß√£o de documenta√ß√£o...")
        
        # Gera p√°gina inicial
        self.generate_section("", "index")
        
        # Gera todas as se√ß√µes
        for section, subsections in self.sections:
            for subsection in subsections:
                self.generate_section(section, subsection)
        
        logger.info("‚úÖ Gera√ß√£o de documenta√ß√£o conclu√≠da!")

def main():
    """Fun√ß√£o principal."""
    # Configura logging
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    
    # Gera documenta√ß√£o
    generator = DocsGenerator()
    generator.generate_all()

if __name__ == "__main__":
    main() 
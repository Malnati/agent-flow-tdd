#!/usr/bin/env python3
"""
Script para gera√ß√£o autom√°tica de documenta√ß√£o via IA.
"""
import sys
from pathlib import Path

from src.core.agents import AgentOrchestrator
from src.core.models import ModelManager
from src.core.db import DatabaseManager
from src.core.logger import get_logger

logger = get_logger(__name__)

class DocsGenerator:
    """Gerador de documenta√ß√£o via IA."""
    
    def __init__(self, model_manager: ModelManager = None, db_manager: DatabaseManager = None, docs_dir: Path = None):
        """
        Inicializa o gerador de documenta√ß√£o.
        
        Args:
            model_manager: Gerenciador de modelos
            db_manager: Gerenciador de banco de dados
            docs_dir: Diret√≥rio base para documenta√ß√£o
        """
        self.model_manager = model_manager or ModelManager()
        self.db = db_manager or DatabaseManager()
        self.orchestrator = AgentOrchestrator(self.model_manager)
        self.orchestrator.db = self.db
        self.docs_dir = docs_dir or Path("docs")
        logger.info("DocsGenerator inicializado")
        
    def generate_section(self, section: str, subsection: str = None) -> None:
        """
        Gera uma se√ß√£o da documenta√ß√£o.
        
        Args:
            section: Nome da se√ß√£o
            subsection: Nome da subse√ß√£o (opcional)
        """
        try:
            # Monta prompt para o modelo
            prompt = f"Gerar documenta√ß√£o para a se√ß√£o '{section}'"
            if subsection:
                prompt += f", subse√ß√£o '{subsection}'"
                
            # Executa o orquestrador
            result = self.orchestrator.execute(
                prompt=prompt,
                session_id="docs_generation",
                format="markdown"
            )
            
            # Cria diret√≥rio da se√ß√£o
            section_dir = self.docs_dir / section
            section_dir.mkdir(parents=True, exist_ok=True)
            
            # Define arquivo de sa√≠da
            if subsection:
                output_file = section_dir / f"{subsection}.md"
            else:
                output_file = section_dir / "README.md"
                
            # Salva conte√∫do
            output_file.write_text(result.output)
            logger.info(f"Documenta√ß√£o gerada: {output_file}")
            
        except Exception as e:
            error_msg = f"Erro ao gerar se√ß√£o {section}: {str(e)}"
            logger.error(error_msg)
            print(error_msg, file=sys.stderr)
            raise
            
    def generate_docs(self) -> None:
        """Gera a documenta√ß√£o completa do projeto."""
        try:
            print("ü§ñ Gerando documenta√ß√£o via IA...")
            
            # Cria diret√≥rio docs se n√£o existir
            self.docs_dir.mkdir(parents=True, exist_ok=True)
            
            # Gera se√ß√µes principais
            sections = [
                "overview",
                "installation",
                "usage",
                "development",
                "testing",
                "database",
                "logs",
                "deployment",
                "troubleshooting"
            ]
            
            for section in sections:
                self.generate_section(section)
                
            # Gera README.md
            index_content = """# Agent Flow TDD

Framework para desenvolvimento de agentes de IA usando Test-Driven Development.

## Sobre o Projeto

O Agent Flow TDD √© um framework que facilita o desenvolvimento de agentes de IA
seguindo pr√°ticas de TDD (Test-Driven Development). Ele fornece uma estrutura
organizada e ferramentas para criar, testar e implantar agentes de IA de forma
sistem√°tica e confi√°vel.

## Navega√ß√£o

- [Vis√£o Geral](overview/): Arquitetura e conceitos do framework
- [Instala√ß√£o](installation/): Como instalar e configurar
- [Uso](usage/): Como usar o framework
- [Desenvolvimento](development/): Guia para desenvolvedores
- [Testes](testing/): Estrat√©gias de teste
- [Banco de Dados](database/): Estrutura e opera√ß√µes
- [Logs](logs/): Sistema de logging
- [Deploy](deployment/): Implanta√ß√£o em produ√ß√£o
- [Troubleshooting](troubleshooting/): Resolu√ß√£o de problemas
"""
            
            index_file = self.docs_dir / "README.md"
            index_file.write_text(index_content)
            
            print("‚úÖ Documenta√ß√£o gerada com sucesso!")
            
        except Exception as e:
            error_msg = f"‚ùå Erro ao gerar documenta√ß√£o: {str(e)}"
            logger.error(error_msg)
            print(error_msg, file=sys.stderr)
            sys.exit(1)
            
        finally:
            if hasattr(self, 'db'):
                self.db.close()

def main():
    """Fun√ß√£o principal."""
    try:
        generator = DocsGenerator()
        generator.generate_docs()
        
    except Exception as e:
        error_msg = f"‚ùå Erro: {str(e)}"
        print(error_msg, file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main() 
"""
Testes para o m√≥dulo CLI.
"""
import json
from unittest.mock import Mock, patch
import os

import pytest
from typer.testing import CliRunner

from src.cli import app
from src.app import AgentResult

# Setup
runner = CliRunner()

# Mock do SDK MCP
class MockMessage:
    def __init__(self, content, metadata):
        self.content = content
        self.metadata = metadata

class MockMCPHandler:
    def __init__(self):
        self.orchestrator = None
        self.hook = "/prompt-tdd"
    
    def initialize(self, api_key=None):
        pass
    
    def handle_message(self, message):
        pass
    
    def run(self):
        pass

@pytest.fixture
def mock_model_manager():
    """Mock do ModelManager."""
    with patch("src.core.ModelManager") as mock:
        mock_instance = Mock()
        mock_instance.configure = Mock()
        mock_instance.get_available_models = Mock(return_value=["gpt-4", "gpt-3.5"])
        mock.return_value = mock_instance
        yield mock_instance

@pytest.fixture
def mock_orchestrator(mock_model_manager):
    """Mock do AgentOrchestrator."""
    with patch("src.app.AgentOrchestrator") as mock:
        mock_instance = Mock()
        mock_instance.model_manager = mock_model_manager
        mock_instance.visualizer = Mock()
        mock_instance.execute = Mock(return_value=Mock(output="# Feature: Login"))
        mock.return_value = mock_instance
        yield mock_instance

@pytest.fixture
def mock_validate_env():
    """Mock da fun√ß√£o validate_env."""
    with patch("src.cli.validate_env") as mock:
        yield mock

@pytest.fixture
def mock_get_env_status():
    """Mock da fun√ß√£o get_env_status."""
    with patch("src.cli.get_env_status") as mock:
        mock.return_value = {
            "required": {"OPENAI_API_KEY": True},
            "optional": {"ELEVATION_MODEL": False}
        }
        yield mock

@pytest.fixture
def mock_mcp_sdk():
    """Mock do SDK MCP."""
    with patch("src.mcp.BaseMCPHandler") as mock:
        mock_handler = Mock()
        mock_handler.hook = "/prompt-tdd"
        mock_handler.initialize = Mock()
        mock_handler.run = Mock()
        mock.return_value = mock_handler
        yield mock

def test_feature_command_success(mock_model_manager, mock_orchestrator, mock_validate_env, capsys):
    """Testa o comando feature com sucesso."""
    # Setup
    mock_orchestrator.execute.return_value = Mock(
        output=json.dumps({
            "feature": "Login",
            "tests": ["test1"]
        })
    )

    with patch("src.cli.get_orchestrator", return_value=mock_orchestrator):
        # Execu√ß√£o
        with pytest.raises(SystemExit) as exc_info:
            app(["feature", "Criar sistema de login"])
            
        # Verifica√ß√µes
        assert exc_info.value.code == 0
        mock_validate_env.assert_called_once()
        captured = capsys.readouterr()
        assert "üõ†Ô∏è Executando CLI em modo desenvolvimento..." in captured.out

def test_feature_command_markdown_output(mock_model_manager, mock_orchestrator, mock_validate_env, capsys):
    """Testa o comando feature com sa√≠da em markdown."""
    # Setup
    mock_orchestrator.execute.return_value = Mock(
        output="# Feature: Login\n\n## Testes\n- Test 1"
    )

    with patch("src.cli.get_orchestrator", return_value=mock_orchestrator):
        # Execu√ß√£o
        with pytest.raises(SystemExit) as exc_info:
            app(["feature", "Criar login", "--format", "markdown"])
            
        # Verifica√ß√µes
        assert exc_info.value.code == 0
        captured = capsys.readouterr()
        assert "üõ†Ô∏è Executando CLI em modo desenvolvimento..." in captured.out

def test_feature_command_error(mock_model_manager, mock_orchestrator, mock_validate_env, capsys):
    """Testa o comando feature com erro."""
    # Setup
    mock_validate_env.side_effect = Exception("Erro de valida√ß√£o")

    with patch("src.cli.get_orchestrator", return_value=mock_orchestrator):
        # Execu√ß√£o
        with pytest.raises(SystemExit) as exc_info:
            app(["feature", "Criar login"])
            
        # Verifica√ß√µes
        assert exc_info.value.code == 1
        captured = capsys.readouterr()
        assert "Erro ao processar comando" in captured.err

def test_status_command_success(mock_model_manager, mock_get_env_status, capsys):
    """Testa o comando status com sucesso."""
    # Setup
    mock_model_manager.get_available_models.return_value = ["gpt-4", "gpt-3.5"]

    with patch("src.cli.ModelManager", return_value=mock_model_manager):
        # Execu√ß√£o
        with pytest.raises(SystemExit) as exc_info:
            app(["status"])
            
        # Verifica√ß√µes
        assert exc_info.value.code == 0
        mock_get_env_status.assert_called_once()
        mock_model_manager.get_available_models.assert_called_once()
        captured = capsys.readouterr()
        assert "environment" in captured.out
        assert "models" in captured.out

def test_status_command_error(mock_model_manager, mock_get_env_status, capsys):
    """Testa o comando status com erro."""
    # Setup
    mock_get_env_status.side_effect = Exception("Erro ao obter status")

    with patch("src.cli.ModelManager", return_value=mock_model_manager):
        # Execu√ß√£o
        with pytest.raises(SystemExit) as exc_info:
            app(["status"])
            
        # Verifica√ß√µes
        assert exc_info.value.code == 1
        captured = capsys.readouterr()
        assert "Erro ao processar comando" in captured.err

def test_mcp_command_feature(mock_orchestrator, capsys, monkeypatch, mock_mcp_sdk):
    """Testa o comando MCP processando uma feature."""
    # Setup
    input_data = {
        "content": "Criar login",
        "metadata": {
            "type": "feature",
            "options": {
                "model": "gpt-4-turbo",
                "temperature": 0.7
            }
        }
    }

    # Simula entrada stdin
    input_lines = [json.dumps(input_data) + "\n", ""]
    input_iter = iter(input_lines)
    monkeypatch.setattr("sys.stdin.readline", lambda: next(input_iter))

    # Configura mock do handler
    mock_handler = mock_mcp_sdk.return_value
    mock_handler.initialize.return_value = None
    mock_handler.run.side_effect = lambda: None

    with patch.dict(os.environ, {"OPENAI_API_KEY": "test-key"}), \
         patch("src.mcp.MCPHandler", return_value=mock_handler):

        # Execu√ß√£o
        with pytest.raises(SystemExit) as exc_info:
            app(["mcp"])
            
        # Verifica√ß√µes
        assert exc_info.value.code == 0
        mock_handler.initialize.assert_called_once_with(api_key="test-key")
        captured = capsys.readouterr()
        assert "üõ†Ô∏è Executando CLI em modo desenvolvimento..." in captured.out

def test_mcp_command_error(mock_orchestrator, capsys, monkeypatch, mock_mcp_sdk):
    """Testa o comando MCP com erro."""
    # Setup
    with patch("src.mcp.MCPHandler") as mock_handler:
        mock_handler.side_effect = Exception("Erro ao inicializar MCP")

        with patch.dict(os.environ, {"OPENAI_API_KEY": "test-key"}):
            # Execu√ß√£o
            with pytest.raises(SystemExit) as exc_info:
                app(["mcp"])
                
            # Verifica√ß√µes
            assert exc_info.value.code == 1
            captured = capsys.readouterr()
            assert "Erro ao processar comando" in captured.err

def test_mcp_command_no_api_key(mock_orchestrator, capsys, monkeypatch, mock_mcp_sdk):
    """Testa o comando MCP sem chave de API."""
    # Setup
    original_env = dict(os.environ)
    try:
        # Preserva outras vari√°veis de ambiente, apenas remove OPENAI_API_KEY
        if "OPENAI_API_KEY" in os.environ:
            del os.environ["OPENAI_API_KEY"]
            
        # Execu√ß√£o
        with pytest.raises(SystemExit) as exc_info:
            app(["mcp"])
            
        # Verifica√ß√µes
        assert exc_info.value.code == 1
        captured = capsys.readouterr()
        assert "Vari√°veis de ambiente obrigat√≥rias n√£o definidas" in captured.err
    finally:
        # Restaura o ambiente original
        os.environ.clear()
        os.environ.update(original_env)

def test_feature_command_address_requirements(mock_model_manager, mock_orchestrator, mock_validate_env, capsys):
    """Testa o comando feature via terminal para requisitos de endere√ßo."""
    # Setup
    expected_result = {
        "feature": "Gerenciamento de Endere√ßos",
        "acceptance_criteria": [
            "Deve permitir cadastro de endere√ßos com CEP (Brasil) e ZipCode (EUA)",
            "Deve integrar com API de busca de CEP para autopreenchimento",
            "Deve integrar com API de ZipCode US para autopreenchimento",
            "Deve permitir edi√ß√£o de endere√ßos cadastrados",
            "Deve permitir listagem de endere√ßos com pagina√ß√£o e filtros"
        ],
        "test_scenarios": [
            "Cadastro com CEP v√°lido brasileiro",
            "Cadastro com ZipCode v√°lido americano",
            "Tentativa de cadastro com CEP inv√°lido",
            "Tentativa de cadastro com ZipCode inv√°lido",
            "Edi√ß√£o de endere√ßo existente",
            "Listagem com filtro por pa√≠s",
            "Pagina√ß√£o de resultados"
        ],
        "integrations": [
            {"name": "ViaCEP API", "type": "CEP", "country": "BR"},
            {"name": "USPS API", "type": "ZipCode", "country": "US"}
        ],
        "complexity": 4
    }

    mock_orchestrator.execute.return_value = Mock(output=json.dumps(expected_result))

    with patch("src.cli.get_orchestrator", return_value=mock_orchestrator):
        # Execu√ß√£o
        with pytest.raises(SystemExit) as exc_info:
            app(["feature", "Cadastro de endere√ßos"])
            
        # Verifica√ß√µes
        assert exc_info.value.code == 0
        mock_validate_env.assert_called_once()
        captured = capsys.readouterr()
        assert "üõ†Ô∏è Executando CLI em modo desenvolvimento..." in captured.out 

def test_feature_command_with_cache(mock_model_manager, mock_orchestrator, mock_validate_env, capsys):
    """Testa o comando feature com resposta em cache."""
    # Setup
    cached_response = {
        "text": "# Feature: Login\n\n## Testes\n- Test 1",
        "metadata": {
            "model": "gpt-3.5-turbo",
            "provider": "openai",
            "finish_reason": "stop",
            "created": 1234567890,
            "id": "test-id"
        }
    }

    mock_orchestrator.execute.return_value = AgentResult(
        output=cached_response["text"],
        items=[],
        guardrails=[],
        raw_responses=[{
            "id": cached_response["metadata"]["id"],
            "response": cached_response["metadata"]
        }]
    )

    with patch("src.cli.get_orchestrator", return_value=mock_orchestrator):
        # Execu√ß√£o
        with pytest.raises(SystemExit) as exc_info:
            app(["feature", "Criar login", "--format", "markdown"])
            
        # Verifica√ß√µes
        assert exc_info.value.code == 0
        captured = capsys.readouterr()
        assert "üõ†Ô∏è Executando CLI em modo desenvolvimento..." in captured.out
        assert "Feature: Login" in captured.out
        assert "Test 1" in captured.out 
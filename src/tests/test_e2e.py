"""
Testes end-to-end para o Agent Flow TDD.
"""
import os
import json
import subprocess
import shutil
from typing import Dict, Any
import pytest
from unittest.mock import patch

from src.core.db import DatabaseManager
from src.core.logger import setup_logger

logger = setup_logger(__name__)

@pytest.fixture(scope="session")
def test_env(tmp_path_factory):
    """Configura o ambiente de teste."""
    # Cria diret√≥rio tempor√°rio
    test_dir = tmp_path_factory.mktemp("test_env")
    
    # Copia Makefile
    shutil.copy("Makefile", test_dir / "Makefile")
    
    # Cria estrutura de diret√≥rios
    os.makedirs(test_dir / "src" / "configs", exist_ok=True)
    os.makedirs(test_dir / "src" / "tests", exist_ok=True)
    os.makedirs(test_dir / "logs", exist_ok=True)
    
    # Cria arquivo de configura√ß√£o do banco
    db_config = {
        "directories": {"logs": "logs"},
        "database": {
            "default_path": "logs/agent_logs.db",
            "history_limit": 10
        }
    }
    with open(test_dir / "src" / "configs" / "database.yaml", "w") as f:
        import yaml
        yaml.dump(db_config, f)
    
    return test_dir

def run_make_command(prompt: str, mode: str = "feature", format: str = "markdown", test_env = None) -> Dict[str, Any]:
    """
    Executa o comando make dev e retorna o resultado.
    
    Args:
        prompt: Prompt para o TDD
        mode: Modo de execu√ß√£o
        format: Formato de sa√≠da
        test_env: Diret√≥rio de teste
        
    Returns:
        Dicion√°rio com resultado da execu√ß√£o
    """
    try:
        if test_env:
            os.chdir(test_env)
            
        # Executa o comando make
        cmd = f'PYTHONPATH=. make dev prompt-tdd="{prompt}" mode={mode} format={format}'
        result = subprocess.run(
            cmd,
            shell=True,
            capture_output=True,
            text=True,
            env={**os.environ, "PYTHONPATH": "."}
        )
        
        # Verifica logs no banco
        db = DatabaseManager()
        history = db.get_run_history(limit=1)
        db.close()
        
        # Se o c√≥digo de retorno for 2, trata como erro
        if result.returncode == 2:
            result.returncode = 1
        
        return {
            "stdout": result.stdout,
            "stderr": result.stderr,
            "returncode": result.returncode,
            "db_history": history[0] if history else None
        }
    except subprocess.CalledProcessError as e:
        return {
            "stdout": e.stdout if hasattr(e, 'stdout') else "",
            "stderr": e.stderr if hasattr(e, 'stderr') else "",
            "returncode": 1 if e.returncode == 2 else e.returncode,
            "db_history": None
        }

@pytest.mark.e2e
def test_e2e_address_registration_cli_markdown():
    """Testa o fluxo completo de cadastro de endere√ßos via CLI com sa√≠da markdown."""
    # Setup
    prompt = "Cadastro de endere√ßos"
    
    # Execu√ß√£o
    result = run_make_command(prompt)
    
    # Verifica√ß√µes
    assert result["returncode"] in [0, 1], f"C√≥digo de retorno inesperado: {result['returncode']}"
    assert "üõ†Ô∏è Executando CLI em modo desenvolvimento..." in result["stdout"]
    
    # Verifica registro no banco
    db_record = result["db_history"]
    if result["returncode"] == 0:
        assert db_record is not None
        assert db_record["input"] == prompt
        assert db_record["output_type"] == "markdown"
        assert db_record["last_agent"] == "OpenAI"
        assert len(db_record["raw_responses"]) > 0

@pytest.mark.e2e
def test_e2e_address_registration_cli_json():
    """Testa o fluxo completo de cadastro de endere√ßos via CLI com sa√≠da JSON."""
    # Setup
    prompt = "Cadastro de endere√ßos"
    
    # Execu√ß√£o
    result = run_make_command(prompt, format="json")
    
    # Verifica√ß√µes
    assert result["returncode"] in [0, 1], f"C√≥digo de retorno inesperado: {result['returncode']}"
    
    if result["returncode"] == 0:
        # Verifica se a sa√≠da √© um JSON v√°lido
        try:
            # Pega a √∫ltima linha n√£o vazia que n√£o seja uma mensagem de autoflake
            lines = [line for line in result["stdout"].split("\n") if line.strip() and not line.startswith("üßπ") and not line.startswith("‚ú®")]
            output = json.loads(lines[-1])
            assert "content" in output
            assert "metadata" in output
            assert output["metadata"]["type"] == "feature"
        except json.JSONDecodeError:
            pytest.fail("Sa√≠da n√£o √© um JSON v√°lido")
        
        # Verifica registro no banco
        db_record = result["db_history"]
        assert db_record is not None
        assert db_record["input"] == prompt
        assert db_record["output_type"] == "json"
        assert db_record["last_agent"] == "OpenAI"
        assert len(db_record["raw_responses"]) > 0

@pytest.mark.e2e
def test_e2e_address_registration_error_handling():
    """Testa o tratamento de erros no fluxo de cadastro de endere√ßos."""
    # Setup - Remove temporariamente a vari√°vel OPENAI_API_KEY
    original_key = os.environ.get("OPENAI_API_KEY")
    os.environ.pop("OPENAI_API_KEY", None)
    
    try:
        # Execu√ß√£o
        result = run_make_command("Cadastro de endere√ßos")
        
        # Verifica√ß√µes
        assert result["returncode"] in [1, 2], "Esperado c√≥digo de erro 1 ou 2"
        assert "Vari√°veis de ambiente obrigat√≥rias n√£o definidas: OPENAI_API_KEY" in result["stderr"]
        
    finally:
        # Restaura a chave original
        if original_key:
            os.environ["OPENAI_API_KEY"] = original_key

@pytest.mark.e2e
def test_e2e_address_registration_with_autoflake():
    """Testa se o autoflake √© executado ap√≥s a gera√ß√£o."""
    # Setup
    prompt = "Cadastro de endere√ßos"
    
    # Execu√ß√£o
    result = run_make_command(prompt)
    
    # Verifica√ß√µes
    assert result["returncode"] in [0, 1], f"C√≥digo de retorno inesperado: {result['returncode']}"
    
    if result["returncode"] == 0:
        assert "üßπ Limpando c√≥digo com autoflake..." in result["stdout"]
        assert "‚ú® Limpeza de c√≥digo conclu√≠da!" in result["stdout"]

@pytest.mark.e2e
def test_e2e_address_registration_logging():
    """Testa se os logs s√£o gerados corretamente durante a execu√ß√£o."""
    # Setup
    prompt = "Cadastro de endere√ßos"
    
    # Execu√ß√£o
    result = run_make_command(prompt)
    
    # Verifica√ß√µes
    assert result["returncode"] in [0, 1], f"C√≥digo de retorno inesperado: {result['returncode']}"
    
    if result["returncode"] == 0:
        # Verifica se os logs foram registrados no banco
        db_record = result["db_history"]
        assert db_record is not None
        assert len(db_record["raw_responses"]) > 0  # Deve ter pelo menos uma resposta logada
        
        # Verifica se a resposta cont√©m os campos esperados
        raw_response = db_record["raw_responses"][0]
        assert "id" in raw_response
        assert "response" in raw_response
        assert isinstance(raw_response["response"], str)  # Deve ser um JSON serializado

@pytest.mark.e2e
def test_e2e_install_command(test_env):
    """Testa o comando make install."""
    # Configura ambiente de teste
    os.chdir(test_env)
    
    # Executa o comando
    result = subprocess.run(
        "make install",
        shell=True,
        capture_output=True,
        text=True,
        env={**os.environ, "PYTHONPATH": str(test_env)}
    )
    
    # Verifica√ß√µes
    assert result.returncode == 0
    assert "üîß Instalando depend√™ncias..." in result.stdout
    assert "‚úÖ Instala√ß√£o conclu√≠da!" in result.stdout

@pytest.mark.e2e
def test_e2e_clean_command(test_env):
    """Testa o comando make clean."""
    # Configura ambiente de teste
    os.chdir(test_env)
    
    # Cria alguns arquivos e diret√≥rios para limpar
    os.makedirs("build", exist_ok=True)
    os.makedirs("dist", exist_ok=True)
    os.makedirs("__pycache__", exist_ok=True)
    
    # Executa o comando
    result = subprocess.run(
        "make clean",
        shell=True,
        capture_output=True,
        text=True
    )
    
    # Verifica√ß√µes
    assert result.returncode == 0
    assert "üßπ Limpando arquivos tempor√°rios..." in result.stdout
    assert "‚ú® Limpeza conclu√≠da!" in result.stdout
    assert not os.path.exists("build")
    assert not os.path.exists("dist")
    assert not os.path.exists("__pycache__")

@pytest.mark.e2e
def test_e2e_dev_command(test_env):
    """Testa o comando make dev."""
    # Executa o comando
    result = run_make_command(
        prompt="Teste de desenvolvimento",
        mode="feature",
        format="markdown",
        test_env=test_env
    )
    
    # Verifica√ß√µes
    assert result["returncode"] in [0, 1]
    assert "üõ†Ô∏è Executando CLI em modo desenvolvimento..." in result["stdout"]
    
    if result["returncode"] == 0:
        assert "‚úÖ" in result["stdout"]
        assert result["db_history"] is not None

@pytest.mark.e2e
def test_e2e_run_command(test_env):
    """Testa o comando make run."""
    # Configura ambiente de teste
    os.chdir(test_env)
    
    # Executa o comando
    result = subprocess.run(
        'make run prompt-tdd="Teste de execu√ß√£o" mode=feature format=markdown',
        shell=True,
        capture_output=True,
        text=True,
        env={**os.environ, "PYTHONPATH": str(test_env)}
    )
    
    # Verifica√ß√µes
    assert result.returncode in [0, 1]
    assert "üñ•Ô∏è Executando CLI..." in result.stdout

@pytest.mark.e2e
def test_e2e_publish_command(test_env):
    """Testa o comando make publish."""
    # Configura ambiente de teste
    os.chdir(test_env)
    
    # Mock do token PyPI
    with patch.dict(os.environ, {"PYPI_TOKEN": "test-token"}):
        # Executa o comando
        result = subprocess.run(
            "make publish",
            shell=True,
            capture_output=True,
            text=True,
            env={**os.environ, "PYTHONPATH": str(test_env)}
        )
        
        # Verifica√ß√µes
        assert result.returncode in [0, 1]
        if result.returncode == 0:
            assert "üì¶ Preparando pacote para publica√ß√£o..." in result.stdout
            assert "üîÑ Incrementando vers√£o..." in result.stdout
        else:
            assert "‚ùå Erro:" in result.stderr

@pytest.mark.e2e
def test_e2e_publish_command_no_token(test_env):
    """Testa o comando make publish sem token PyPI."""
    # Configura ambiente de teste
    os.chdir(test_env)
    
    # Remove o token PyPI do ambiente
    with patch.dict(os.environ, {}, clear=True):
        # Executa o comando
        result = subprocess.run(
            "make publish",
            shell=True,
            capture_output=True,
            text=True
        )
        
        # Verifica√ß√µes
        assert result.returncode == 1
        assert "‚ùå Erro: Vari√°vel PYPI_TOKEN n√£o definida" in result.stdout

@pytest.mark.e2e
def test_e2e_coverage_command(test_env):
    """Testa o comando make coverage."""
    # Configura ambiente de teste
    os.chdir(test_env)
    
    # Executa o comando
    result = subprocess.run(
        "pytest --cov=src tests/",
        shell=True,
        capture_output=True,
        text=True,
        env={**os.environ, "PYTHONPATH": str(test_env)}
    )
    
    # Verifica√ß√µes
    assert result.returncode in [0, 1]
    if result.returncode == 0:
        assert "coverage" in result.stdout

@pytest.mark.e2e
def test_e2e_lint_command():
    """Testa o comando make lint."""
    # Executa o comando
    result = subprocess.run(
        "flake8 src/ --max-line-length=120 --exclude=__init__.py",
        shell=True,
        capture_output=True,
        text=True
    )
    
    # Verifica√ß√µes
    assert result.returncode in [0, 1]

@pytest.mark.e2e
def test_e2e_format_command(test_env):
    """Testa o comando make format."""
    # Configura ambiente de teste
    os.chdir(test_env)
    
    # Executa o comando
    result = subprocess.run(
        "black src/ --line-length 120",
        shell=True,
        capture_output=True,
        text=True
    )
    
    # Verifica√ß√µes
    assert result.returncode in [0, 1]
    if result.returncode == 0:
        assert "reformatted" in result.stdout or "All done!" in result.stdout

@pytest.mark.e2e
def test_e2e_autoflake_command():
    """Testa o comando make autoflake."""
    # Executa o comando
    result = subprocess.run(
        "find . -type f -name '*.py' -not -path './.venv/*' -exec autoflake --remove-all-unused-imports --remove-unused-variables --in-place {} \\;",
        shell=True,
        capture_output=True,
        text=True
    )
    
    # Verifica√ß√µes
    assert result.returncode == 0 

@pytest.mark.e2e
def test_e2e_help_command(test_env):
    """Testa o comando make help."""
    # Configura ambiente de teste
    os.chdir(test_env)
    
    # Executa o comando
    result = subprocess.run(
        "make help",
        shell=True,
        capture_output=True,
        text=True
    )
    
    # Verifica√ß√µes
    assert result.returncode == 0
    assert "Comandos dispon√≠veis:" in result.stdout
    assert "Ambiente:" in result.stdout
    assert "Qualidade:" in result.stdout
    assert "Banco de Dados:" in result.stdout
    assert "Publica√ß√£o:" in result.stdout
    assert "make install" in result.stdout
    assert "make test" in result.stdout
    assert "make logs" in result.stdout 